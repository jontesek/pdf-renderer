version: "3.9"

x-common-variables: &common-variables
  ENVIRONMENT: local
  DEBUG: 1
  REDIS_URL: redis://redis/0
  DB_URL: postgresql://postgres:postgres@db:5432/renderer
  S3_ENDPOINT: http://s3:9000
  S3_ACCESS_KEY: minio
  S3_SECRET_KEY: minio123

services:
  app:
    image: renderer
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    volumes:
      - .:/app
    env_file:
      - .env
    command:
      # - "python"
      # - "-m"
      # - "renderer.api.app"
      - "flask"
      - "run"
      - "--host"
      - "0.0.0.0"
      # - "gunicorn"
      # - "-w"
      # - "4"
      # - "-b"
      # - "0.0.0.0:5000"
      # - "renderer.api.app:app"
    environment:
      <<: *common-variables
      FLASK_ENV: development
      FLASK_APP: renderer.api.app
      WEB_CONCURRENCY: 5   # 2*CPU + 1
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    depends_on:
      - redis
      - s3
      - db

  worker:
    image: renderer
    restart: on-failure
    volumes:
      - .:/app
    env_file:
      - .env
    environment: *common-variables
    command: dramatiq renderer.worker --processes 2 --threads 2 --watch .
    tty: true
    depends_on:
      - app

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  s3:
    image: minio/minio
    ports:
      - "9000:9000"
    volumes:
      - ./1s3_storage:/data
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    command: server /data

  db:
    image: postgres:14.4-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=renderer
    ports:
      - '5432:5432'
    volumes: 
      - ./2postgres:/var/lib/postgresql/data

volumes:
  2postgres:
    driver: local
  1s3_storage: